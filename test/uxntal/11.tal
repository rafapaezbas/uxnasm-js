( draw-with-keyboard.tal )
( devices )
|00 @System  [ &vector $2 &pad $6   &r $2 &g $2 &b $2 ]
|20 @Screen  [ &vector $2 &width    $2 &height $2 &pad   $2 &x $2 &y $2 &addr $2 &pixel $1 &sprite ]
|80 @Controller [ &vector $2 &button   $1 &key    $1 ]

( main program )
|0100 
      ( set system colors )
      #2ce9 .System/r DEO2
      #01c0 .System/g DEO2
      #2ce5 .System/b DEO2

      ( assign controller vector )
      ;on-controller .Controller/vector DEO2

      ( set initial x,y coordinates )
      #0008 .Screen/x DEO2
      #0008 .Screen/y DEO2
      ( set sprite address )
      ;square .Screen/addr DEO2
BRK

@on-controller ( -> )
      .Controller/button DEI DUP ( read and duplicate button byte )
      #01 AND ( isolate bit 0, corresponding to Ctrl )
      ,&fill JCN ( if the bit is not 0, jump to fill, otherwise continue )

      &outline
        #01 .Screen/sprite DEO ( draw outline )
        ,&check-arrows JMP ( continue to check-arrows )

      &fill
        #04 .Screen/sprite DEO ( draw filled )
      
      &check-arrows
        ( use button byte from the stack )
        DUP #10 AND ( isolate bit 4, corresponding to Up )
        ,&up JCN ( jump if not 0 )
        DUP #20 AND ( isolate bit 5, corresponding to Down )
        ,&down JCN ( jump if not 0 )
        DUP #40 AND ( isolate bit 6, corresponding to Left )
        ,&left JCN ( jump if not 0 )
        DUP #80 AND ( isolate bit 7, corresponding to Right )
        ,&right JCN ( jump if not 0 )

        POP BRK
       
      &up
       .Screen/y DEI2 #0008 SUB2 .Screen/y DEO2 ( decrement y )
       POP
      BRK
      &down
       .Screen/y DEI2 #0008 ADD2 .Screen/y DEO2 ( increment y )
       POP
      BRK
      &left
       .Screen/x DEI2 #0008 SUB2 .Screen/x DEO2 ( decrement x )
       POP
      BRK
      &right
       .Screen/x DEI2 #0008 ADD2 .Screen/x DEO2 ( increment x )
       POP
      BRK
BRK
( sprite )
@square ff81 8181 8181 81ff
